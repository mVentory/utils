Setup AWS Lambda Code

1) Restore Node.JS packages used in the app (google-spreadsheet).
	- Install Node.JS from https://nodejs.org
	- Run npm install inside lambda folder

2) Archive app.js, creds.json and node_modules folder in a .zip file.

3) Create a new AWS Lambda function.
	- Skip Step 1 (Select blueprint)
	- Enter Function name
	- Select "Node.js" as "Runtime"
	- Select "Upload a .zip file" as the code entry type
	- Upload the .zip from Step 2
	- Enter "app.handler" as the "Handler"
	- Select "basic execution role" as the "Role"
	- Enter "128" as "Memory (MB)"
	- Enter "30 seconds" as "Timeout" (Function currently generally runs under 10 seconds)
	- Finish wizard
	
4) Add Event Source to run AWS Lambda function every 15 minutes.
	- Click Event sources tab from the function details page
	- Click Add event sources link
	- Select "Scheduled Event" as the "Event Source type"
	- Enter Schedule name
	- Select "rate(15 minutes)" as the "Schedule expression"
	- Enable event source
	- Finish wizard


Generating Google Sheet JSON Key File

1) Go to the Google Developers Console (https://console.developers.google.com/project)
2) Select your project or create a new one (and then select it)
3) Enable the Drive API for your project
	- In the sidebar on the left, expand APIs & auth > APIs
	- Search for "drive"
	- Click on "Drive API"
	- Click the blue "Enable API" button
4) Create a service account for your project
	- In the sidebar on the left, expand APIs & auth > Credentials
	- Click "Create new Client ID" button
	- Select the "Service account" option
	- Click "Create Client ID" button to continue
	- When the dialog appears click "Okay, got it"
	- Your JSON key file is generated and downloaded to your machine
5) Use the the generated JSON key file
	- Place the file inside the lambda folder
	- Rename it to creds.json or any filename as long as it matches config.credentialsPath in lambda/app.js
6) Add "user_email" key with value of the email address used to generate the JSON key file (creds.json)

Notes:

- You need to set the spread sheet to be editable for the Lambda Function to write data to it, sharing it as "Anyone with the link can EDIT" should be enough (no need to publish to web)
- To use test sample chart project, you have to replace the URL in sample/index.js (including gid parameter)
- The Lamda Function uses google-spreadsheet module, details on how to generate the JSON key file can be found there (https://www.npmjs.com/package/google-spreadsheet)